{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"swcat - a simple software catalog application","text":"<p>swcat is a lightweight, file-based software catalog designed to help you maintain a clear and concise overview of the applications, services, and APIs within your team or organization.</p> <p>It automatically generates SVG diagrams to visualize your software landscape, and allows you to explore your catalog through entity links and a powerful query language.</p> <p>Tip</p> <p>Get started now and  check out the User guide for detailed information.</p> <p>You can find the source code on GitHub: https://github.com/dnswlt/swcat</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#getting-started-windows","title":"Getting started (Windows)","text":""},{"location":"getting-started/#prequisites","title":"Prequisites","text":"<ul> <li>Install Graphviz.</li> <li>Download the latest binary release version <code>swcat-&lt;version&gt;.zip</code> from the    GitHub releases page.</li> </ul>"},{"location":"getting-started/#run-swcat","title":"Run swcat","text":"<p>Unpack <code>swcat-&lt;version&gt;.zip</code> to any folder you like and run:</p> <pre><code>swcat.exe -addr localhost:9191 -config examples/config/swcat.yml examples/flights\n</code></pre> <p>Point your browser at http://localhost:9191 and explore the example catalog.</p> <p>Adjust the <code>-config</code> path and path to the catalog files (<code>examples/flights</code>) to any software catalog you want to view or edit.</p>"},{"location":"getting-started/#getting-started-docker","title":"Getting started (Docker)","text":"<p>To run <code>swcat</code> locally in Docker and serve the example catalog folder:</p> <p>Check out the source code repo:</p> <pre><code>git clone https://github.com/dnswlt/swcat.git\n</code></pre> <p>Before the first execution, set up the <code>.env</code> file, so files modified inside the container have proper user and group IDs  on the host file system:</p> <pre><code># in the repo root\necho \"UID=$(id -u)\" &gt; .env\necho \"GID=$(id -g)\" &gt;&gt; .env\n</code></pre> <p>Then, run docker via <code>make</code>:</p> <pre><code>make docker-build\nmake docker-up\n</code></pre> <p>Then open: http://localhost:9191</p> <p>To stop the process:</p> <pre><code>make docker-stop\n</code></pre> <ul> <li>Docker Compose maps host 9191 to container 8080.</li> <li>The catalog is mounted in read-write (rw) mode at <code>/catalog</code> inside the container.</li> </ul> <p>If you want to work with your own catalog, pass its location (folder) in the <code>CATALOG_DIR</code> environment variable. Your (optional) configuration file must be located at <code>$CATALOG_DIR/swcat.yml</code>.</p> <pre><code>CATALOG_DIR=/abs/path/to/your/catalog make docker-up\n</code></pre> <p>Tip</p> <p><code>swcat</code> refuses to start if there are catalog validation errors. Check the stderr logs in such cases to understand the problem.</p>"},{"location":"getting-started/#getting-started-wout-docker","title":"Getting started (w/out Docker)","text":""},{"location":"getting-started/#prequisites_1","title":"Prequisites","text":"<ul> <li>Install a recent version of Go (&gt;= 1.24.5).</li> <li>Install <code>npm</code> (e.g. via nvm).</li> <li>Install Graphviz.</li> </ul>"},{"location":"getting-started/#build-and-run","title":"Build and run","text":"<p>Check out the source code repo:</p> <pre><code>git clone https://github.com/dnswlt/swcat.git\n</code></pre> <p>Build the frontend artifacts:</p> <pre><code>cd web\nnpm install\nnpm run build\ncd ..\n</code></pre> <p>Now run the server, using the example catalog files:</p> <pre><code>go run ./cmd/swcat -addr localhost:9191 -config examples/config/swcat.yml examples/flights\n</code></pre> <p>Point your browser at http://localhost:9191 and explore the example catalog.</p>"},{"location":"user-guide/","title":"User guide","text":"<p>Welcome to the <code>swcat</code> user guide! Use the links in the navigation pane on the left-hand side to learn about individual topics.</p> <p>Start with the Catalog if you're new to <code>swcat</code>.</p>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>You can configure swcat by providing a YAML configuration file (typically <code>swcat.yml</code>) via the <code>--config</code> command line flag. The following sections explain the available configuration options.</p> <p>See internal/config/config.go for the Go struct that holds all available configuration options.</p>"},{"location":"user-guide/configuration/#catalog-configuration","title":"Catalog Configuration","text":"<p>The <code>catalog</code> section allows you to configure repository-specific settings.</p> <ul> <li> <p><code>annotationBasedLinks</code>: An optional map from annotation keys to links.     The <code>url</code> and <code>title</code> fields of these links support the following     template annotations:</p> <ul> <li><code>{{ .Metadata.&lt;Field&gt; }}</code> for any <code>&lt;Field&gt;</code> in the entity's metadata     (e.g., <code>Name</code>).</li> <li><code>{{ .Annotation.Key }}</code> and <code>{{ .Annotation.Value }}</code> for the key and value     of the annotation being processed.</li> <li>(only for versioned API entities) <code>{{ .Version }}</code> and     <code>{{ .Version.&lt;Part&gt; }}</code> for each API version or one of its parts     (<code>Major</code>, <code>Minor</code>, <code>Patch</code>, <code>Suffix</code>).     The version part fields are only populated if the version string matches a     common pattern (e.g. v1, 1.2.3, or v1alpha).</li> </ul> </li> <li> <p><code>validation</code>: Defines validation rules for entity specifications.   You can define rules for domains, systems, components, resources, and APIs.</p> <ul> <li><code>values</code>: A list of allowed values for a field.</li> <li><code>matches</code>: A list of regular expressions that the value must match.</li> </ul> </li> </ul>"},{"location":"user-guide/configuration/#svg-configuration","title":"SVG Configuration","text":"<p>The <code>svg</code> section allows you to customize the appearance of the generated SVG diagrams.</p> <ul> <li><code>stereotypeLabels</code>: A list of labels whose values should be displayed as     \u00abstereotypes\u00bb in node labels.</li> <li><code>nodeColors</code>: Allows you to override the default node colors based on labels      or types.<ul> <li><code>labels</code>: Maps label keys and values to specific colors.</li> <li><code>types</code>: Maps entity types to specific colors.</li> </ul> </li> <li><code>showAPIProvider</code>: If true, includes the API provider (component) in the labels of API entities.</li> <li><code>showParentSystem</code>: If true, includes the parent system in the labels of component, resource, and API entities.</li> <li><code>showVersionAsLabel</code>: If true, shows the API version in consumed/provided API references if no explicit label is present.</li> </ul>"},{"location":"user-guide/configuration/#example-configuration","title":"Example Configuration","text":"<pre><code># Example configuration file.\nsvg:\n  # Show the (programming) language label as a &lt;&lt;stereotype&gt;&gt; on nodes.\n  stereotypeLabels:\n    - foobar.dev/language\n  # Highlight nodes with a certain status in different fill colors.\n  nodeColors:\n    labels:\n      foobar.dev/status:\n        deprecated: '#f3c1de'\n        critical: '#c7398a'\n    types:\n      # Color entities (of any kind) with spec.type \"external\" in a special color.\n      external: '#ffbf79'\n  # Include the API provider (component) in labels of API entities.\n  showAPIProvider: true\n  # Include the parent system in labels of component, resource, and API entities.\n  showParentSystem: true\n  # Show the API version in consumedApis/providedApis references, if specified\n  # and unless an explicit label is present.\n  showVersionAsLabel: false\ncatalog:\n  annotationBasedLinks:\n    # Auto-generates an entry in the \"Links\" section of every entity detail page\n    # that has a hexz.me/repo annotation.\n    hexz.me/repo:\n      # The annotation value is the \"project\" name, the repo is named after the entity.\n      url: https://example.com/projects/{{ .Annotation.Value }}/repos/{{ .Metadata.Name }}\n      title: Source code\n  validation:\n    api:\n      type:\n        matches: \n          - \"http(s)?/.*\"\n          - \"grpc(/.*)?\"\n          - \"rest(/.*)?\"\n      lifecycle: \n        values: [\"experimental\", \"production\", \"deprecated\"]\n    resource:\n      type:\n        values: [\"database\", \"cache\"]\n    component:\n      type:\n        values: [\"service\", \"batch\", \"support\", \"external\"]\n      lifecycle: \n        values: [\"development\", \"production\", \"deprecated\", \"external\"]\n    system:\n      type:\n        matches:\n          - \".*\"  # just for fun\n</code></pre>"},{"location":"user-guide/query-syntax/","title":"Search query syntax","text":"<p>In the list view of each entity kind (components, systems, etc.), you can search for entities using a simple query language.</p>"},{"location":"user-guide/query-syntax/#default-search","title":"Default search","text":"<p>If you search for a term without specifying an attribute, it will search within the qualified name of an entity (a combination of its namespace and name). For example:</p> <pre><code>my-component\n</code></pre> <p>This will find all entities that contain \"my-component\" in their qualified name.</p>"},{"location":"user-guide/query-syntax/#attribute-search","title":"Attribute search","text":"<p>You can also search for entities with specific attributes. The format is <code>attribute:value</code>. For example:</p> <pre><code>title:gateway\n</code></pre> <p>This will find all entities with \"gateway\" in their title.</p> <p>The following attributes are available for filtering:</p> <ul> <li><code>*</code>: Full-text search across all fields (<code>*:'some thing'</code>, <code>*:foo</code>).</li> <li><code>meta</code>: Search in all metadata fields (name, namespace, title, description, labels, annotations, tags, links).</li> <li><code>name</code>: The name of the entity.</li> <li><code>namespace</code>: The namespace of the entity.</li> <li><code>title</code>: The title of the entity.</li> <li><code>description</code>: The description of the entity.</li> <li><code>tag</code>: A tag associated with the entity.</li> <li><code>label</code>: A label associated with the entity (searches both key and value).</li> <li><code>annotation</code>: An annotation associated with the entity (searches both key and value).</li> <li><code>owner</code>: The owner of the entity.</li> <li><code>system</code>: The system that the entity is a part of (for components, apis, resources).</li> <li><code>type</code>: The type of the entity (e.g., for components, apis, groups).</li> <li><code>lifecycle</code>: The lifecycle state of the entity (e.g., for components and apis).</li> </ul>"},{"location":"user-guide/query-syntax/#operators","title":"Operators","text":"<p>The following operators are supported for attribute searches:</p> <ul> <li><code>:</code> (contains): Checks if the attribute value contains the given search term (case-insensitive).</li> <li><code>~</code> (regex): Matches the attribute value against a regular expression.</li> </ul> <p>Example with regex:</p> <pre><code>name~^my-.*-prod$\n</code></pre>"},{"location":"user-guide/query-syntax/#combining-expressions","title":"Combining expressions","text":"<p>You can combine multiple expressions using <code>AND</code> and <code>OR</code>. Parentheses can be used for grouping. If no operator is specified, <code>AND</code> is used by default.</p> <p>Examples:</p> <pre><code>owner:my-team AND tag:production\n</code></pre> <pre><code>owner:team-a OR owner:team-b\n</code></pre> <pre><code>(owner:team-a OR owner:team-b) AND tag:production\n</code></pre>"},{"location":"user-guide/query-syntax/#negation","title":"Negation","text":"<p>You can negate an expression using <code>!</code>.</p> <p>Example:</p> <pre><code>!owner:my-team\n</code></pre>"},{"location":"user-guide/catalog/","title":"The software catalog","text":"<p>The <code>swcat</code> software catalog consists of a set of YAML (<code>*.yml</code>) files, each containing one or more entity definitions (separated by the standard YAML document separator, <code>---</code>). Its data format follows the Kubernetes Resource Model (KRM), using the familiar <code>apiVersion</code>, <code>kind</code>, <code>metadata</code>, and <code>spec</code> fields.</p> <p>For details on the common fields, see:</p> <ul> <li>Metadata</li> <li>Entity References</li> </ul> <p>Supported entity kinds are a subset of the backstage.io software catalog, with minor adjustments to required and optional fields and entity references:</p> <ul> <li>Domain: A high-level grouping of related systems that share a bounded context (terminology, models, business purpose).</li> <li>System: A collection of Components, Resources, and APIs that together deliver a cohesive application.</li> <li>Component: A deployable and runnable software artifact such as an API gateway or a backend service.</li> <li>Resource: Represents infrastructure such as messaging brokers, caches, or databases.</li> <li>API: A communication interface provided by one or more components and     consumed by others (e.g., gRPC, http/REST, Pub/Sub topics, web services, or FTP).</li> <li>Group: An organizational entity (team or business unit) used to model ownership and contact information.</li> </ul> <p>For more details on each entity kind, see the following pages:</p> <ul> <li>Domain</li> <li>System</li> <li>Component</li> <li>Resource</li> <li>API</li> <li>Group</li> </ul>"},{"location":"user-guide/catalog/#source-code-references","title":"Source code references","text":"<p>The fields of each entity kind are also documented in internal/api/api.go.</p> <p>A larger example can be found under examples/flights.</p>"},{"location":"user-guide/catalog/api/","title":"API","text":"<p>A communication interface provided by one or more components and consumed by others (e.g., gRPC, http/REST, Pub/Sub topics, web services, or FTP).</p> <p>The <code>spec</code> of an <code>API</code> entity has the following fields:</p> <ul> <li><code>type</code> - required - The type of the API (e.g., \"openapi\", \"grpc\", \"asyncapi\").</li> <li><code>lifecycle</code> - required - The lifecycle state of the API (e.g., \"production\", \"experimental\").</li> <li><code>owner</code> - required - An entity reference to the owner of the API (e.g., <code>group:my-team</code>).</li> <li><code>system</code> - required - An entity reference to the system that the API belongs to.</li> <li><code>versions</code> - optional - A list of versions in which this API currently exists.<ul> <li><code>version</code> - required - The version name, e.g. <code>v1</code> or  <code>1.0.0</code>.</li> <li><code>lifecycle</code> - required - The lifecycle state of the API in this particular version.     The lifecycle of at least one version must match the lifecycle of the API. </li> </ul> </li> </ul> <p>Example:</p> <pre><code>apiVersion: swcat/v1\nkind: API\nmetadata:\n    name: my-api\nspec:\n  type: openapi\n  lifecycle: production\n  owner: my-team\n  system: my-system\n  versions:\n    - version: v1\n      lifecycle: deprecated\n    - version: v2.1\n      lifecycle: production\n</code></pre>"},{"location":"user-guide/catalog/component/","title":"Component","text":"<p>A deployable and runnable software artifact such as an API gateway or a backend service.</p> <p>The <code>spec</code> of a <code>Component</code> entity has the following fields:</p> <ul> <li><code>type</code> - required - The type of component (e.g., \"service\", \"website\", \"library\").</li> <li><code>lifecycle</code> - required - The lifecycle state of the component (e.g., \"production\", \"experimental\").</li> <li><code>owner</code> - required - An entity reference to the owner of the component (e.g., <code>group:my-team</code>).</li> <li><code>system</code> - required - An entity reference to the system that the component belongs to.</li> <li><code>providesApis</code> - optional - A list of entity references     to APIs that are provided by this component.</li> <li><code>consumesApis</code> - optional - A list of entity references     to APIs that are consumed by this component.     May use version references and labels, e.g. <code>my-api @v2 \"oauth\"</code>.</li> <li><code>dependsOn</code> - optional - A list of entity references     to other components or resources that this component depends on.     MUST include the kind specifier and may use labels, e.g. <code>resource:my-database \"read\"</code>.</li> </ul> <p>Example:</p> <pre><code>apiVersion: swcat/v1\nkind: Component\nmetadata:\n    name: my-component\nspec:\n  type: service\n  lifecycle: production\n  owner: my-team\n  system: my-system\n  providesApis:\n    - my-api\n  consumesApis:\n    - other-api @v2 \"some usage\"\n  dependsOn:\n    - resource:my-database\n</code></pre>"},{"location":"user-guide/catalog/domain/","title":"Domain","text":"<p>A high-level grouping of related systems that share a bounded context (terminology, models, business purpose).</p> <p>The <code>spec</code> of a <code>Domain</code> entity has the following fields:</p> <ul> <li><code>owner</code> - required - An entity reference to the owner of the domain (e.g., <code>group:my-team</code>).</li> <li><code>type</code> - optional - The type of domain.</li> </ul> <p>Example:</p> <pre><code>apiVersion: swcat/v1\nkind: Domain\nmetadata:\n    name: my-domain\nspec:\n  owner: default/my-team\n  subdomainOf: domain:default/parent-domain\n</code></pre>"},{"location":"user-guide/catalog/entity-references/","title":"Entity References","text":"<p>Many <code>spec</code> fields contain references to other entities. Entity references are strings that identify other entities, typically in the format:</p> <p><code>[&lt;kind&gt;:][&lt;namespace&gt;/]&lt;name&gt;</code></p> <ul> <li>If <code>&lt;kind&gt;</code> is omitted, it is inferred from the context (e.g., for an <code>owner</code> field, the kind is <code>group</code>).</li> <li>If <code>&lt;namespace&gt;</code> is omitted, it defaults to the <code>default</code> namespace.</li> </ul> <p>Examples:</p> <pre><code>- my-api  # Only name\n- my-namespace/my-resource  # Namespace and name\n- api:ns/some-api  # Kind, namespace, and name\n</code></pre> <p>For relationships like <code>consumesApis</code>, <code>providesApis</code>, and <code>dependsOn</code>, you can use a more expressive \"labelled\" entity reference, which includes an optional version, and a label:</p> <p><code>[&lt;kind&gt;:][&lt;namespace&gt;/]&lt;name&gt; [@&lt;version&gt;] [\"&lt;label&gt;\"]</code></p> <ul> <li>The <code>[@&lt;version&gt;]</code> part is a shorthand for the <code>version</code> attribute (see below).     It can be used to refer to specific versions of an API (which must be present     in the API's <code>spec.versions</code>).</li> <li>The <code>[\"&lt;label&gt;\"]</code> part describes the relationship and is displayed in SVG diagrams.</li> </ul> <p>Here are some examples of this shorthand notation:</p> <pre><code>- component:my-component \"is using\"\n- api:my-api @v2\n- resource:my-db \"stores data for\"\n</code></pre> <p>If you want to specify more attributes than just the <code>version</code> attribute, you must use a YAML object instead of the shorthand string:</p> <pre><code>spec:\n  dependsOn:\n    - ref: component:other-component\n      label: is using\n      attrs:\n        version: v1\n        criticality: high\n</code></pre> <p>Apart from <code>version</code>, attributes are not interpreted by <code>swcat</code> in any way yet.</p>"},{"location":"user-guide/catalog/group/","title":"Group","text":"<p>An organizational entity (team or business unit) used to model ownership and contact information.</p> <p>The <code>spec</code> of a <code>Group</code> entity has the following fields:</p> <ul> <li><code>type</code> - required - The type of group (e.g., \"team\", \"business-unit\").</li> <li><code>profile</code> - optional - Profile information about the group.<ul> <li><code>displayName</code> - optional - A display name for the group.</li> <li><code>email</code> - optional - An email for the group.</li> <li><code>picture</code> - optional - A URL for a picture of the group.</li> </ul> </li> <li><code>members</code> - optional - A list of members of the group.</li> </ul> <p>Example:</p> <pre><code>apiVersion: swcat/v1\nkind: Group\nmetadata:\n    name: my-team\nspec:\n  type: team\n  profile:\n    displayName: My Team\n    email: my-team@example.com\n  parent: parent-group\n  members:\n    - John Doe\n</code></pre>"},{"location":"user-guide/catalog/metadata/","title":"Metadata","text":"<p>Every entity definition follows the Kubernetes Resource Model (KRM) structure and therefore consists of four fields:</p> <pre><code>apiVersion: swcat/v1\nkind: Component  # Or System, Resource, API, etc.\nmetadata: ... # See this section\nspec: ...  # Specific to each entity kind\n</code></pre> <p>The <code>metadata</code> section contains the following fields.</p> <p>The valid <code>metadata</code> fields are the following:</p> <ul> <li> <p><code>name</code> - required - The name of the entity. Must be unique within the catalog     for any given namespace + kind pair.</p> </li> <li> <p><code>namespace</code> - optional - The namespace that the entity belongs to.     If empty, the entity is assume to live in the default namespace.</p> </li> <li> <p><code>title</code> - optional - A display name of the entity, used in certain places in the UI.</p> </li> <li> <p><code>description</code> - optional - A short description of the entity (one or a few lines max.)     Do not use this field to document a component, API, etc. in detail, but use     the <code>links</code> field to reference external documentation.</p> </li> <li> <p><code>labels</code> - optional - User-specified key/value pairs     that are displayed as small chips in the swcat UI entity detail view and     that can be used for filtering entities.     See the k8s documentation for the intended semantics of     labels.</p> </li> <li> <p><code>annotations</code> - optional - User-specified key/value pairs that are not visible in the UI.     Also see the k8s documentation for     annotations.</p> </li> </ul> <p>Tip</p> <p>There are a few well-known annotations that can be used to control the display of entities in the UI:</p> <ul> <li><code>swcat/stereotype</code> - A <code>&lt;&lt;stereotype&gt;&gt;</code> label that should be shown for the node     in SVG diagrams.</li> <li><code>swcat/fillcolor</code> - An SVG color name or 6-digit hex color code     (e.g., <code>#7f7f7f</code>) that should be used to color the entity node in SVG diagrams.</li> </ul> <ul> <li> <p><code>tags</code> - optional - A list of single-valued strings that can used to, well,     tag entities.</p> </li> <li> <p><code>links</code> - optional - A list of external hyperlinks related to the entity     (e.g., documentation).</p> <ul> <li><code>url</code> - required - The URL that the link points to.</li> <li><code>title</code> - optional - The title of the link (shown instead of the raw URL, if given).</li> <li><code>type</code> - optional - The type of link, e.g., \"documentation\".</li> <li><code>icon</code> - optional - The name of an icon to display along with the link.     Currently not interpreted by <code>swcat</code>.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>metadata:\n  name: my-component\n  namespace: my-namespace\n  title: My Component\n  description: |\n    Brief description of the entity. **Can** use _simple_ Markdown,\n    including [links](https://example.com).\n  labels:\n    foobar.dev/language: java17\n  annotations:\n    swcat/stereotype: new\n  tags:\n    - needs-update\n  links:\n    - url: https://example.com/my-component\n      title: Source code\n</code></pre>"},{"location":"user-guide/catalog/resource/","title":"Resource","text":"<p>Represents infrastructure such as messaging brokers, caches, or databases.</p> <p>The <code>spec</code> of a <code>Resource</code> entity has the following fields:</p> <ul> <li><code>type</code> - required - The type of resource (e.g., \"database\", \"messaging-broker\").</li> <li><code>owner</code> - required - An entity reference to the owner of the resource (e.g., <code>group:my-team</code>).</li> <li><code>system</code> - required - An entity reference to the system that the resource belongs to.</li> <li><code>dependsOn</code> - optional - A list of entity references     to other components or resources that this component depends on.     MUST include the kind specifier, e.g. <code>resource:my-database</code>.</li> </ul> <p>Example:</p> <pre><code>apiVersion: swcat/v1\nkind: Resource\nmetadata:\n    name: my-resource\nspec:\n  type: database\n  owner: my-team\n  system: my-system\n</code></pre>"},{"location":"user-guide/catalog/system/","title":"System","text":"<p>A collection of Components, Resources, and APIs that together deliver a cohesive application.</p> <p>The <code>spec</code> of a <code>System</code> entity has the following fields:</p> <ul> <li><code>owner</code> - required - An entity reference to the owner of the system (e.g., <code>group:my-team</code>).</li> <li><code>domain</code> - optional - An entity reference to the domain that the system belongs to.</li> <li><code>type</code> - optional - The type of system.</li> </ul> <p>Example:</p> <pre><code>apiVersion: swcat/v1\nkind: System\nmetadata:\n    name: my-system\nspec:\n  owner: my-team\n  domain: my-domain\n</code></pre>"}]}